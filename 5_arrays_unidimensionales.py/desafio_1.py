# üìå Desaf√≠o: Men√∫ de Opciones con Listas y Funciones
# Desarrollar un programa en Python que presente un men√∫ de opciones donde el usuario pueda realizar distintas operaciones con un conjunto de n√∫meros.

# üîπ Opciones del Men√∫:
#  1Ô∏è‚É£ Ingresar datos: Permitir al usuario ingresar 10 n√∫meros enteros en el rango de -1000 a 1000.
#  2Ô∏è‚É£ Cantidad de positivos y negativos: Mostrar cu√°ntos n√∫meros ingresados son positivos y cu√°ntos son negativos.
#  3Ô∏è‚É£ Suma de los n√∫meros pares: Calcular y mostrar la sumatoria de los n√∫meros pares.
#  4Ô∏è‚É£ Mayor n√∫mero impar: Identificar y mostrar el mayor n√∫mero impar ingresado.
#  5Ô∏è‚É£ Listar los n√∫meros ingresados: Mostrar todos los n√∫meros en el orden en que fueron ingresados.
#  6Ô∏è‚É£ Listar los n√∫meros pares: Mostrar √∫nicamente los n√∫meros pares de la lista.
#  7Ô∏è‚É£ Listar los n√∫meros en posiciones impares: Mostrar los n√∫meros que se encuentran en posiciones impares dentro de la lista.
#  8Ô∏è‚É£ Salir del programa.
# üîπ Condiciones:
#  ‚úîÔ∏è El usuario debe ingresar los n√∫meros antes de acceder a las opciones 2 a 7.
#  ‚úîÔ∏è El programa debe estar estructurado en funciones, siguiendo el paradigma de programaci√≥n funcional:
# Funciones espec√≠ficas: Para operaciones como determinar si un n√∫mero es positivo, negativo o par.
# Funciones generales: Para listar elementos o calcular sumatorias.
# üîπ Estructura del C√≥digo:
#  üìå El programa debe estar organizado en m√≥dulos:
# Especificas.py: Contendr√° las funciones espec√≠ficas.
# Array_Generales.py: Contendr√° las funciones generales.
# Las funciones de entrada de datos deben importarse desde el m√≥dulo   .
# üîπ Consejo:
#  ‚úÖ Desarrollar y probar primero cada funci√≥n individualmente antes de organizarlas en m√≥dulos.

import os
import Array_Generales as Arr

def mostrar_menu():
    print(f"""{"-"*20}LISTAS{"-"*20}
    1. Ingresar datos
    2. Cantidad de positivos y negativos
    3. Suma de los n√∫meros pares
    4. Mayor n√∫mero impar
    5. Listar n√∫meros ingresados
    6. Listar n√∫meros pares
    7. Listar n√∫meros en posiciones impares
    8. Salir
        """)
    

cargados = False
numeros = []

while True:
    mostrar_menu()
    opcion = int(input('Seleccione una opci√≥n (1 a 8): '))
    
    if 1 < opcion < 8 and not cargados: 
        os.system('cls')
        print('Debe cargar los datos antes de seleccionar otra opci√≥n\n')
        continue
    
    match opcion:
        case 1:
            os.system('cls')
            numeros = Arr.crear_array(10)
            cargados = True
        case 2:
            os.system('cls')
            positivos, negativos = Arr.positivos_negativos_array(numeros)
            print(f'La cantidad de n√∫meros positivos es: {positivos}\nLa cantidad de n√∫meros negativos es: {negativos}')
            input('\n\n\nPresione enter para volver al menu...')
        case 3:
            os.system('cls')
            suma = Arr.suma_pares(numeros)
            print(f'La suma de los n√∫meros pares es: {suma}')
            input('\n\n\nPresione enter para volver al menu...')
        case 4:
            os.system('cls')
            impar = Arr.mayor_numero_impar(numeros)
            print(f'El mayor n√∫mero impar es: {impar}') if impar else print('No hay n√∫meros impares')
            input('\n\n\nPresione enter para volver al menu...')
        case 5:
            os.system('cls')
            Arr.mostrar_array(numeros)
            input('\n\n\nPresione enter para volver al menu...')
        case 6:
            os.system('cls')
            Arr.mostrar_pares_array(numeros)
            input('\n\n\nPresione enter para volver al menu...')
        case 7:
            os.system('cls')
            Arr.mostrar_posiciones_impares_array(numeros)
            input('\n\n\nPresione enter para volver al menu...')
        case 8:
            break
        case _: 
            os.system('cls')
            print('\nOpci√≥n incorrecta. Debe seleccionar una opcion entre 1 y 8\n\n')
    
    
